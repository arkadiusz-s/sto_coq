Theorem 12 is the meat, but you need prior definitions and lemmas to understand it.

Definition 1 (Committed trace): A committed trace t' of a trace t is the trace that is obtained by 
filtering out all operations belonging to transactions that do not have a serialization point in t.

Definition 2 (Serial trace): A serial trace is a trace where all actions belonging to the same transactions are grouped together. 

Definition 3 (Serialized trace):  A serialized trace t' of a trace t is t's committed trace reordered by 
grouping together actions of the same transaction in the order of the serialization points.
—> Do we need definitions of serial trace and serialized trace? It seems redundant to me.

Definition 4 (STO trace): A trace is a STO trace if and only if it can be generated by running its contained transactions in STO.
(* There is where the modeling happens. "if" ensures completeness, "only if" ensures soundness *)

Lemma 5: If t is a valid STO trace, then its serialized trace t' is a valid STO trace.
Proof by Induction on t.

Lemma 6: A serialized trace t' of t is serial.
This is a direct result of Definition 3.
-> That’s why I think the above two definitions are redundant 

Definition 7 (Read Synchronization List): The read synchronization list of a trace is a list where each element 
represents the version numbers that a committed transaction has read.

Definition 8 (Read Synchronization): Two traces t and t' are read-synchronized if their read synchronization lists are equal.
-> We made an assumption that they will have the same sequence of tid. I think this assumption should not be made

Definition 9 (Write Synchronization List): The read synchronization list of a trace is a list where each element 
represents the values that a committed transaction has written.

Definition 10 (Write Synchronization): Two traces t and t' are write-synchronized if their write synchronization lists are equal.

Definition 11 (Trace equivalence): Two traces t and t' are equivalent if they are read-synchronized and write-synchronized.

(* To make the proof go through easier, we can add more lemmas. *)
Theorem 12 (Serialized Trace Equivalence): If t is a STO trace, the serialized trace t' of t is equivalent to t.
Proof:
  Base case: empty trace []
  Inductive hypothesis: sto trace t is equivalent to its serialized trace t'.
  Now we prove that for all action *a* of transaction *tid*, if (tid, a)::t = t1 is a sto trace, 
then its serialized trace t1' is equivalent to it.
  Consider the action type of a.
  (1) If a is not a serialization action, then the committed traces of t and t1 are the same. 
So, the read and write synchronization lists of t1 are the same as those of t. By Definition 3, t1' = t', so the read and write
synchronization lists of t1' are the same as those of t'. Since t is equivalent to t', the read and write synchronization lists 
of t and t' are both the same. This implies that the read and write synchronization lists of t1 and t1' are also the same. 
Therefore, they are equivalent by Definition 11.
  (2) If a is a serialization action, by Definition 3, t1' contains read and write actions belonging to transaction tid that are 
not present in t', and these read and write actions occur in the same order as they do in t1. This implies the new entries (those
generated by actions of transaction tid) in the synchronization lists of t1 and t1' are the same. Since the synchronization lists
of t and t' are the same (a result of t1 being equivalent to t1'), by construction (or definition) of synchronization lists, we
know that the synchronization lists of t1 and t1' are the same. Therefore, t1 is equivalent to t1'.
Qed.

Corollary 13 (Serializability): For all sto trace t, there exists a serial sto trace t' that is equivalent to t.
Proof.
  Let t' be the serialized trace of t.
  We know that t' is equivalent to t by Theorem 12.
  By Lemma 5, t' is a sto trace.
  By Lemma 6, t' is a serial trace.
Qed.

